package com.sponia.opyfunctioindemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sponia.opyfunctioindemo.dao.Step;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP".
*/
public class StepDao extends AbstractDao<Step, String> {

    public static final String TABLENAME = "STEP";

    /**
     * Properties of entity Step.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property StepCount = new Property(3, Float.class, "stepCount", false, "STEP_COUNT");
        public final static Property Acceleration = new Property(4, Float.class, "acceleration", false, "ACCELERATION");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
    };


    public StepDao(DaoConfig config) {
        super(config);
    }
    
    public StepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DATE\" TEXT NOT NULL ," + // 2: date
                "\"STEP_COUNT\" REAL," + // 3: stepCount
                "\"ACCELERATION\" REAL," + // 4: acceleration
                "\"STATUS\" TEXT);"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Step entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindString(3, entity.getDate());
 
        Float stepCount = entity.getStepCount();
        if (stepCount != null) {
            stmt.bindDouble(4, stepCount);
        }
 
        Float acceleration = entity.getAcceleration();
        if (acceleration != null) {
            stmt.bindDouble(5, acceleration);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Step readEntity(Cursor cursor, int offset) {
        Step entity = new Step( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // stepCount
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // acceleration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Step entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.getString(offset + 2));
        entity.setStepCount(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setAcceleration(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Step entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Step entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
